# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.9 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# C compiler 
CC = gcc

# C++ compiler 
CXX = g++

# Standard preprocessor flags (common for CC and CXX) 
CPPFLAGS ?= 

# Standard linker flags 
LDFLAGS ?= 

# Sets which type of Harbour Libraries will be used at link stage: shared or static
# If you are creating a dynamic library (dll) then you must set HBLIBSTYPE=static
# valid values are [static,shared]
HBLIBSTYPE ?= static

# [x]Harbour compiler executable name 
HBCC ?= harbour

# Link with Harbour multithread libraries [no,yes]
HBMT ?= no

# ---------------------------------------------------------------
# [x]Harbour optional libraries
# ---------------------------------------------------------------
# Link in the Harbour TIP library [yes,no]
HBLIB_TIP ?= yes

# Link in the Harbour HBNETIO library [yes,no]
HBLIB_HBNETIO ?= yes

# Link in the Harbour FM library [yes,no]
HBLIB_FM ?= no

# Link in the Harbour CT library [yes,no]
HBLIB_CT ?= yes

# Link in the Harbour GTTRM library [yes,no]
HBLIB_GTTRM ?= yes

# Link in the System GPM library [yes,no]
HBLIB_GPM ?= no

# Link in the Harbour GTXWC library [yes,no]
HBLIB_GTXWC ?= no

# Link in the Harbour GTCRS library [yes,no]
HBLIB_GTCRS ?= no

# Link in the Harbour GTSLN library [yes,no]
HBLIB_GTSLN ?= no

# Link in the z library [yes,no]
LIB_Z ?= no

# Link in the Harbour GTCGI library [yes,no]
HBLIB_GTCGI ?= no

# Link in the Harbour GTSTD library [yes,no]
HBLIB_GTSTD ?= no

# Link in the Harbour GTPCA library [yes,no]
HBLIB_GTPCA ?= no

# ---------------------------------------------------------------
# [x]Harbour compiler options
# ---------------------------------------------------------------
# Standard flags for Harbour compiler 
HBFLAGS ?= -n -a -v -m -q0

# Type of Harbour compiled binaries [debug,release]
HBBUILD ?= release

# Output C source level (0=compact,1=normal,2=verbose,3=real C code) [0,1,2,3]
HBOUTSRCLEVEL ?= 0

# Warning level for the Harbour Compiler [0,1,2,3]
HBWARNL ?= 3

# Exit severity level for the Harbour Compiler [0,1,2]
HBEXITSL ?= 2

# Suffix '64' to lib path on x86_64 machines 
HB_LIB_ARCH ?= $(shell if uname -m | grep 64 >/dev/null ; then echo "64" ; else echo "" ; fi)

# Name of the *nix OS (uname) 
NIXOS ?= $(shell uname)

# Where the object and lib files are built 
__BUILDDIR__ ?= obj/gcc_$(NIXOS)_$(shell uname -m)

# Encoding [ansi,unicode]
WX_ENCODING ?= unicode

#  [release,debug]
WX_BUILD ?= release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

_WL_STARTGROUP = $(shell if gcc --version | grep apple >/dev/null ; then echo "" ; else \
	echo "-Wl,--start-group" ; fi)
_WL_ENDGROUP = $(shell if gcc --version | grep apple >/dev/null ; then echo "" ; else echo \
	"-Wl,--end-group" ; fi)
BITMAPBUTTON_CFLAGS = -I/usr/include/harbour -I/usr/local/include/harbour \
	-I/usr/include -I/usr/local/include -W -Wall -O2 $(__D_WX_UNICODE_p) \
	$(__D_WX_DEBUG_p) $(__WX_DEBUG_INFO) -Iinclude/wxHarbour \
	-I/usr/include/wxHarbour -I/usr/local/include/wxHarbour \
	-I../../include/wxHarbour $(CPPFLAGS) -D__HARBOUR__ -fno-strict-aliasing
BITMAPBUTTON_OBJECTS =  \
	$(__BUILDDIR__)/bitmapButton_bitmapButton.o
BITMAPBUTTON_HBFLAGS = $(HBFLAGS) -gc$(HBOUTSRCLEVEL) -w$(HBWARNL) \
	-es$(HBEXITSL) $(__HBDEBUG__) $(__HBMTFLAG__) -dHB_OS_UNIX $(HBOSUNIXDEF) \
	-I/usr/include/harbour -I/usr/local/include/harbour -I/usr/include \
	-I/usr/local/include $(__D_WX_UNICODE_p) $(__D_WX_DEBUG_p) \
	-Iinclude/wxHarbour -I/usr/include/wxHarbour \
	-I/usr/local/include/wxHarbour -I../../include/wxHarbour

### Conditionally set variables: ###

ifeq ($(HBMT),yes)
__HBMTLIB__ = mt
endif
ifeq ($(HBMT),yes)
__HBMTFLAG__ = -DHB_MT
endif
ifeq ($(HBBUILD),debug)
__HBDEBUG__ = -b -d_DEBUG_
endif
ifeq ($(NIXOS),Darwin)
HBOSUNIXDEF = -dHB_OS_DARWIN
endif
ifeq ($(NIXOS),Linux)
HBOSUNIXDEF = -dHB_OS_LINUX
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour_$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)-$(WX_BUILD)
endif
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBEXTERN_p = -lhbextern
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBVM_p = -lhbvm$(__HBMTLIB__)
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBRTL_p = -lhbrtl
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBLANG_p = -lhblang
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBCPAGE_p = -lhbcpage
endif
ifeq ($(HBLIB_GTCGI),yes)
__LIB_GTCGI_p = -lgtcgi
endif
ifeq ($(HBLIB_GTSTD),yes)
__LIB_GTSTD_p = -lgtstd
endif
ifeq ($(HBLIB_GTPCA),yes)
__LIB_GTPCA_p = -lgtpca
endif
ifeq ($(HBLIB_GTTRM),yes)
__LIB_GTTRM_p = -lgttrm
endif
ifeq ($(HBLIB_GTXWC),yes)
__LIB_GTXWC_p = -lgtxwc
endif
ifeq ($(HBLIB_GTCRS),yes)
__LIB_GTCRS_p = -lgtcrs
endif
ifeq ($(HBLIB_GTSLN),yes)
__LIB_GTSLN_p = -lgtsln
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBRDD_p = -lhbrdd
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBUDDALL_p = -lhbuddall
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBUSRRDD_p = -lhbusrrdd
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDNTX_p = -lrddntx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDCDX_p = -lrddcdx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDNSX_p = -lrddnsx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDFPT_p = -lrddfpt
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBHSX_p = -lhbhsx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBSIX_p = -lhbsix
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBMACRO_p = -lhbmacro
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBPP_p = -lhbpp
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBCOMMON_p = -lhbcommon
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBPCRE_p = -lhbpcre
endif
ifeq ($(HBLIB_FM),yes)
__LIB_HBFM_p = -lhbfm
endif
ifeq ($(HBLIB_CT),yes)
__LIB_HBCT_p = -lhbct
endif
ifeq ($(HBLIB_TIP),yes)
__LIB_HBTIP_p = -lhbtip
endif
ifeq ($(HBLIB_HBNETIO),yes)
__LIB_HBNETIO_p = -lhbnetio
endif
ifeq ($(HBLIBSTYPE),shared)
__SLIB_HARBOUR_p = -lharbour
endif
ifeq ($(LIB_Z),yes)
__LIBZ_p = -lz
endif
ifeq ($(HBLIB_GTCRS),yes)
__LIB_NCURSES_p = -lncurses
endif
ifeq ($(HBLIB_GTSLN),yes)
__LIB_SLANG_p = -lslang
endif
ifeq ($(HBLIB_GPM),yes)
__LIB_GPM_p = -lgpm
endif
ifeq ($(HBLIB_GTXWC),yes)
__LIB_X11_p = -lX11
endif
ifeq ($(WX_ENCODING),unicode)
__D_WX_UNICODE_p = -D_UNICODE
endif
ifeq ($(WX_BUILD),debug)
__D_WX_DEBUG_p = -D__WXDEBUG__
endif
ifeq ($(WX_BUILD),debug)
__WX_DEBUG_INFO = -g
endif


all: $(__BUILDDIR__)
$(__BUILDDIR__):
	@mkdir -p $(__BUILDDIR__)

### Targets: ###

all: ./bitmapButton

install: 

uninstall: 

clean: 
	rm -f $(__BUILDDIR__)/*.o
	rm -f $(__BUILDDIR__)/*.d
	rm -f ./bitmapButton

./bitmapButton: $(BITMAPBUTTON_OBJECTS)
	$(CXX) -o $@ $(BITMAPBUTTON_OBJECTS)   -L/usr/lib$(HB_LIB_ARCH)/harbour -L/usr/local/lib$(HB_LIB_ARCH)/harbour -L/usr/X11R6/lib $(__WX_DEBUG_INFO) -L../../$(__BUILDDIR__) $(LDFLAGS)  $(__WXHLIBNAME_p) $(_WL_STARTGROUP) $(__LIB_HBEXTERN_p) -lhbdebug $(__LIB_HBVM_p) $(__LIB_HBRTL_p) $(__LIB_HBLANG_p) $(__LIB_HBCPAGE_p) $(__LIB_GTCGI_p) $(__LIB_GTSTD_p) $(__LIB_GTPCA_p) $(__LIB_GTTRM_p) $(__LIB_GTXWC_p) $(__LIB_GTCRS_p) $(__LIB_GTSLN_p) $(__LIB_HBRDD_p) $(__LIB_HBUDDALL_p) $(__LIB_HBUSRRDD_p) $(__LIB_RDDNTX_p) $(__LIB_RDDCDX_p) $(__LIB_RDDNSX_p) $(__LIB_RDDFPT_p) $(__LIB_HBHSX_p) $(__LIB_HBSIX_p) $(__LIB_HBMACRO_p) -lhbcplr $(__LIB_HBPP_p) $(__LIB_HBCOMMON_p) $(__LIB_HBPCRE_p) $(__LIB_HBFM_p) $(__LIB_HBCT_p) $(__LIB_HBTIP_p) $(__LIB_HBNETIO_p) $(__SLIB_HARBOUR_p) $(_WL_ENDGROUP) `wx-config --libs` -lm $(__LIBZ_p) -ldl $(__LIB_NCURSES_p) $(__LIB_SLANG_p) $(__LIB_GPM_p) $(__LIB_X11_p)

run: all
	../../bin/run_App.sh bitmapButton

$(__BUILDDIR__)/bitmapButton_bitmapButton.o: ./bitmapButton.prg
	$(HBCC) $(BITMAPBUTTON_HBFLAGS) -o$@_.c $<
	$(CC) -c $(BITMAPBUTTON_CFLAGS) -o$@ $@_.c

.PHONY: all install uninstall clean


# Dependencies tracking:
-include $(__BUILDDIR__)/*.d
