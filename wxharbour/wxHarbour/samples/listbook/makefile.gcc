# =========================================================================
#     This makefile was generated by
#     Bakefile 0.2.9 (http://www.bakefile.org)
#     Do not modify, all changes will be overwritten!
# =========================================================================



# -------------------------------------------------------------------------
# These are configurable options:
# -------------------------------------------------------------------------

# The common installation prefix for binary and DLL files 
EXEC_PREFIX ?= C:\opt\bin

# C compiler 
CC = gcc

# C++ compiler 
CXX = g++

# Standard preprocessor flags (common for CC and CXX) 
CPPFLAGS ?= 

# Standard linker flags 
LDFLAGS ?= 

# Sets which type of Harbour Libraries will be used at link stage: shared or static
# If you are creating a dynamic library (dll) then you must set HBLIBSTYPE=static
# valid values are [static,shared]
HBLIBSTYPE ?= static

# Harbour lib version 
HBLIBVER ?= 21

# Path for the installed [x]Harbour compiler (bin,lib and include dirs) 
HB_INSTALL_PREFIX ?= C:\Hrbmingw

# [x]Harbour compiler executable name 
HBCC ?= harbour

# Link with Harbour multithread libraries [no,yes]
HBMT ?= no

# ---------------------------------------------------------------
# [x]Harbour optional libraries
# ---------------------------------------------------------------
# Link in the Harbour TIP library [yes,no]
HBLIB_TIP ?= yes

# Link in the Harbour HBNETIO library [yes,no]
HBLIB_HBNETIO ?= yes

# Link in the Harbour FM library [yes,no]
HBLIB_FM ?= no

# Link in the Harbour CT library [yes,no]
HBLIB_CT ?= yes

# Link in the Harbour GTWIN library [yes,no]
HBLIB_GTWIN ?= yes

# Link in the Harbour GTXVT library [yes,no]
HBLIB_GTXVT ?= no

# Link in the Harbour GTWVT library [yes,no]
HBLIB_GTWVT ?= no

# Link in the Harbour GTCGI library [yes,no]
HBLIB_GTCGI ?= no

# Link in the Harbour GTSTD library [yes,no]
HBLIB_GTSTD ?= no

# Link in the Harbour GTPCA library [yes,no]
HBLIB_GTPCA ?= no

# ---------------------------------------------------------------
# [x]Harbour compiler options
# ---------------------------------------------------------------
# Standard flags for Harbour compiler 
HBFLAGS ?= -n -a -v -m -q0

# Type of Harbour compiled binaries [debug,release]
HBBUILD ?= release

# Output C source level (0=compact,1=normal,2=verbose,3=real C code) [0,1,2,3]
HBOUTSRCLEVEL ?= 0

# Warning level for the Harbour Compiler [0,1,2,3]
HBWARNL ?= 3

# Exit severity level for the Harbour Compiler [0,1,2]
HBEXITSL ?= 2

# Where to search for Harbour includes 
HB_INC_INSTALL ?= $(HB_INSTALL_PREFIX)\include

# Where to search for Harbour libs 
HB_LIB_INSTALL ?= $(HB_INSTALL_PREFIX)\lib\win\mingw

# Where the object and lib files are built 
__BUILDDIR__ ?= obj\gcc_win32

# ---------------------------------------------------------------
# wxWidgets flags (version 2.8 required)
# ---------------------------------------------------------------
# 
# Where is wxWidgets installed 
HB_WITH_WX ?= C:\wxWidgets-2.8.11

# Encoding [ansi,unicode]
WX_ENCODING ?= unicode

#  [release,debug]
WX_BUILD ?= release



# -------------------------------------------------------------------------
# Do not modify the rest of this file!
# -------------------------------------------------------------------------

### Variables: ###

_WL_STARTGROUP = -Wl,--start-group
_WL_ENDGROUP = -Wl,--end-group
PREFIX = $(HB_INSTALL_PREFIX)
LISTBOOK_CFLAGS = -I$(HB_INC_INSTALL) -W -Wall -O2 $(p) $(p_0) $(__WX_DEBUG_INFO) \
	-Iinclude\wxHarbour -D__WXMSW__ -I$(HB_INC_INSTALL)\wxHarbour \
	-I$(HB_WITH_WX)\Include -I$(HB_WITH_WX)\lib\gcc_lib\msw$(WX_LIBID) \
	-I..\..\include\wxHarbour $(CPPFLAGS) -D__HARBOUR__ -fno-strict-aliasing
LISTBOOK_OBJECTS =  \
	$(__BUILDDIR__)\listbook_listbook.o
LISTBOOK_HBFLAGS = $(HBFLAGS) -gc$(HBOUTSRCLEVEL) -w$(HBWARNL) -es$(HBEXITSL) \
	$(__HBDEBUG__) $(__HBMTFLAG__) -dHB_OS_WIN_32 -I$(HB_INC_INSTALL) $(p) $(p_0) \
	-Iinclude\wxHarbour -D__WXMSW__ -I$(HB_INC_INSTALL)\wxHarbour \
	-I$(HB_WITH_WX)\Include -I$(HB_WITH_WX)\lib\gcc_lib\msw$(WX_LIBID) \
	-I..\..\include\wxHarbour

### Conditionally set variables: ###

ifeq ($(HBMT),yes)
__HBMTLIB__ = mt
endif
ifeq ($(HBMT),yes)
__HBMTFLAG__ = -DHB_MT
endif
ifeq ($(HBBUILD),debug)
__HBDEBUG__ = -b -d_DEBUG_
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
__WXHLIBNAME_p = -lwxHarbour_$(WX_BUILD)
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
__WXHLIBNAME_p = -lwxHarbour_$(WX_ENCODING)-$(WX_BUILD)
endif
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBEXTERN_p = -lhbextern
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBVM_p = -lhbvm$(__HBMTLIB__)
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBRTL_p = -lhbrtl
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBLANG_p = -lhblang
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBCPAGE_p = -lhbcpage
endif
ifeq ($(HBLIB_GTCGI),yes)
__LIB_GTCGI_p = -lgtcgi
endif
ifeq ($(HBLIB_GTSTD),yes)
__LIB_GTSTD_p = -lgtstd
endif
ifeq ($(HBLIB_GTPCA),yes)
__LIB_GTPCA_p = -lgtpca
endif
ifeq ($(HBLIB_GTXVT),yes)
__LIB_GTXVT_p = -lgtxvt
endif
ifeq ($(HBLIB_GTWIN),yes)
__LIB_GTWIN_p = -lgtwin
endif
ifeq ($(HBLIB_GTWVT),yes)
__LIB_GTWVT_p = -lgtwvt
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBRDD_p = -lhbrdd
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBUDDALL_p = -lhbuddall
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBUSRRDD_p = -lhbusrrdd
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDNTX_p = -lrddntx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDCDX_p = -lrddcdx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDNSX_p = -lrddnsx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_RDDFPT_p = -lrddfpt
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBHSX_p = -lhbhsx
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBSIX_p = -lhbsix
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBMACRO_p = -lhbmacro
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBPP_p = -lhbpp
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBCOMMON_p = -lhbcommon
endif
ifeq ($(HBLIBSTYPE),static)
__LIB_HBPCRE_p = -lhbpcre
endif
ifeq ($(HBLIB_FM),yes)
__LIB_HBFM_p = -lhbfm
endif
ifeq ($(HBLIB_CT),yes)
__LIB_HBCT_p = -lhbct
endif
ifeq ($(HBLIB_TIP),yes)
__LIB_HBTIP_p = -lhbtip
endif
ifeq ($(HBLIB_HBNETIO),yes)
__LIB_HBNETIO_p = -lhbnetio
endif
ifeq ($(HBLIBSTYPE),shared)
__SLIB_HARBOUR_p = -lharbour-$(HBLIBVER)
endif
ifeq ($(WX_ENCODING),unicode)
p = -D_UNICODE
endif
ifeq ($(WX_BUILD),debug)
p_0 = -D__WXDEBUG__
endif
ifeq ($(WX_BUILD),debug)
__WX_DEBUG_INFO = -g
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),ansi)
WX_LIBID = d
endif
endif
ifeq ($(WX_BUILD),debug)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = ud
endif
endif
ifeq ($(WX_BUILD),release)
ifeq ($(WX_ENCODING),unicode)
WX_LIBID = u
endif
endif


all: $(__BUILDDIR__)
$(__BUILDDIR__):
	-if not exist $(__BUILDDIR__) mkdir $(__BUILDDIR__)

### Targets: ###

all: .\listbook.exe

install: 

uninstall: 

clean: 
	-if exist $(__BUILDDIR__)\*.o del $(__BUILDDIR__)\*.o
	-if exist $(__BUILDDIR__)\*.d del $(__BUILDDIR__)\*.d
	-if exist .\listbook.exe del .\listbook.exe

.\listbook.exe: $(LISTBOOK_OBJECTS)
	$(CXX) -o $@ $(LISTBOOK_OBJECTS)  -Wl,--subsystem,windows -mwindows -L$(HB_LIB_INSTALL) $(__WX_DEBUG_INFO) -L$(HB_WITH_WX)\lib\gcc_lib -L..\..\$(__BUILDDIR__) $(LDFLAGS)  $(__WXHLIBNAME_p) $(_WL_STARTGROUP) $(__LIB_HBEXTERN_p) -lhbdebug $(__LIB_HBVM_p) $(__LIB_HBRTL_p) $(__LIB_HBLANG_p) $(__LIB_HBCPAGE_p) $(__LIB_GTCGI_p) $(__LIB_GTSTD_p) $(__LIB_GTPCA_p) $(__LIB_GTXVT_p) $(__LIB_GTWIN_p) $(__LIB_GTWVT_p) -lhbwin $(__LIB_HBRDD_p) $(__LIB_HBUDDALL_p) $(__LIB_HBUSRRDD_p) $(__LIB_RDDNTX_p) $(__LIB_RDDCDX_p) $(__LIB_RDDNSX_p) $(__LIB_RDDFPT_p) $(__LIB_HBHSX_p) $(__LIB_HBSIX_p) $(__LIB_HBMACRO_p) -lhbcplr $(__LIB_HBPP_p) $(__LIB_HBCOMMON_p) $(__LIB_HBPCRE_p) $(__LIB_HBFM_p) $(__LIB_HBCT_p) $(__LIB_HBTIP_p) $(__LIB_HBNETIO_p) $(__SLIB_HARBOUR_p) $(_WL_ENDGROUP) -lwxmsw28$(WX_LIBID)_richtext -lwxmsw28$(WX_LIBID)_aui -lwxmsw28$(WX_LIBID)_html -lwxmsw28$(WX_LIBID)_xrc -lwxmsw28$(WX_LIBID)_adv -lwxmsw28$(WX_LIBID)_core -lwxbase28$(WX_LIBID) -lwxbase28$(WX_LIBID)_net -lwxbase28$(WX_LIBID)_xml -lwxtiff -lwxjpeg -lwxpng -lwxzlib -lwxregex$(WX_LIBID) -lwxexpat -lkernel32 -luser32 -lgdi32 -ladvapi32 -lws2_32 -lwinspool -lcomctl32 -lcomdlg32 -lshell32 -luuid -lrpcrt4 -lwsock32 -lole32 -loleaut32 -lmpr -lwinmm -lmapi32 -limm32 -lmsimg32 -lwininet

run: all
	.\listbook.exe

$(__BUILDDIR__)\listbook_listbook.o: ./listbook.prg
	$(HBCC) $(LISTBOOK_HBFLAGS) -o$@_.c $<
	$(CC) -c $(LISTBOOK_CFLAGS) -o$@ $@_.c

.PHONY: all install uninstall clean


SHELL := $(COMSPEC)

# Dependencies tracking:
-include $(__BUILDDIR__)/*.d
